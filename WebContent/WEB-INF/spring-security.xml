<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	
	<security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied" >
	
		<security:intercept-url pattern="/auth/login" access="permitAll"/>
		<security:intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>
		
		<security:form-login
				login-page="/auth/login" 
				authentication-failure-url="/auth/login?error=true" 
				default-target-url="/main/common"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/auth/login" 
				logout-url="/auth/logout"/>
	
		<security:custom-filter ref="captchaCaptureFilter" before="FORM_LOGIN_FILTER"/>
		<security:custom-filter ref="captchaVerifierFilter" after="FORM_LOGIN_FILTER"/>
	</security:http>
	
	<!-- For capturing CAPTCHA fields -->
	<bean id="captchaCaptureFilter" class="com.chat.application.filter.CaptchaCaptureFilter" />
	
	<!-- For verifying CAPTCHA fields -->
	<!-- Private key is assigned by the reCATPCHA service -->
	<bean id="captchaVerifierFilter" class="com.chat.application.filter.CaptchaVerifierFilter" 
				p:useProxy="false" 
				p:proxyPort="" 
				p:proxyHost=""
				p:failureUrl="/auth/login?error=true"
				p:captchaCaptureFilter-ref="captchaCaptureFilter"
				p:privateKey="ADD-YOUR-PRIVATE-KEY-HERE"/>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider user-service-ref="userDetailsService">
	        		<security:password-encoder ref="passwordEncoder"/>
	        </security:authentication-provider>
	</security:authentication-manager>
	
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	 <!-- An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	 <!-- john's password is admin, while jane;s password is user  -->
	 <security:user-service id="userDetailsService">
	    <security:user name="john" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_USER, ROLE_ADMIN" />
	    <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
	  </security:user-service>
	
</beans>
